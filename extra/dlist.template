////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Welcome to the template linked list.

David Wisniewski
10/14/2017
Project3
Description:
This class is the .cc file for the linked list. In this file  are the
implemenntations for the template class dlist
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template <class T>
dlist<T>::dlist()
{
  head = NULL;
  tail = NULL;
  node_count = 0;
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
dlist<T>::dlist(const dlist<T> & other)
{

    head = NULL;
    head = new Dnode<T>(other.head->data());
    head->set_Previous(NULL);
    tail = head;
    const Dnode<T> *s_ptr = other.head ->Nlink();
    Dnode<T> *d_ptr,*tmp;
    d_ptr= head;
    tmp = head;
    while(s_ptr != NULL)
    {
      d_ptr-> set_Next(new Dnode<T>(s_ptr -> data()));
      d_ptr = d_ptr -> Nlink();
      d_ptr-> set_Previous(tmp);
      tmp = tmp ->Nlink();
      tail = d_ptr;
      s_ptr = s_ptr -> Nlink();
    }
    node_count= other.node_count;

}

////////////////////////////////////////////////////////////////////////////////
template<class T>
dlist<T>::~dlist()
{
  Dnode<T> *rmptr;
  while (head != NULL)
  {
    rmptr = head;
    head = head -> Nlink();
    delete rmptr;

  }
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
 dlist<T>& dlist<T>::operator= (const dlist<T>& other)
{
  Dnode<T> *rmptr;
  if( this == &other)
  {
    return *this;
  }
  while (head != NULL)
  {
    rmptr = head;
    head -> Nlink();
    delete rmptr;
  }
  if (other.head != NULL)
  {
    head = new Dnode<T>(other.head->data());
    head -> set_Previous(NULL);
    const Dnode<T> * s_ptr = other.head;
    Dnode<T> * d_ptr = head;
    Dnode<T> *tmp =head;
    s_ptr = s_ptr -> link();
    while(s_ptr != NULL)
    {
      d_ptr-> set_Next(new Dnode<T>(s_ptr->data()));
      d_ptr = d_ptr -> Nlink();
      d_ptr-> set_Previous(tmp);
      tmp= tmp-> Nlink();
      d_ptr -> set_link(NULL);
      s_ptr = s_ptr -> Nlink();
    }
  }
  return *this;
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::front_insert(T& object)
{

  Dnode<T> *tmp = new Dnode<T>(object);
  tmp -> set_Previous(NULL);
  tmp -> set_Next(NULL);
  node_count++;
  if(tail== NULL && head == NULL)
  {
  head =tmp;
  tail =tmp;
  return;
  }

  if (tail == head)
  {

    tmp -> set_Next(head);
    head -> set_Previous(tmp);
    tail = head;
    head = tmp;
    return;
  }
  tmp -> set_Next(head);
  head -> set_Previous(tmp);
  head = tmp;
}

////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::rear_insert(T& object)
{

  Dnode<T> *tmp = new Dnode<T>(object);
  tmp -> set_Previous(NULL);
  tmp -> set_Next(NULL);
  node_count++;

  if(tail== NULL && head == NULL)
  {

  head = tmp;
  tail = tmp;
  return;
  }

  if (tail == head)
  {
    head ->set_Next(tmp);
    tmp -> set_Previous(head);
    tail = tmp;
    return;
  }

  tmp -> set_Previous(tail);
  tail -> set_Next(tmp);
  tail = tmp;

}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::show()
{
  Dnode<T> *tmp = head;
  while(tmp != NULL)
  {
    std::cout<< tmp -> data() << endl;
    tmp = tmp-> Nlink();
  }
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::reverse_show()
{
  Dnode<T> *tmp = tail;
  while(tmp != NULL)
  {
    std::cout<< tmp -> data() << endl;
    tmp = tmp-> Plink();
  }
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::front_remove()
{
  Dnode<T> *tmp= head;
  if(tail == head)
    {
    --node_count;
    head = NULL;
    tail= NULL;
    delete tmp;
    return;

    }
  if(tail== NULL && head == NULL)
  {
    return;
  }
  head = head -> Nlink();
  head -> set_Previous(NULL);
  delete tmp;
  --node_count;
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::rear_remove()
{
  Dnode<T> *tmp = tail;
  if(tail == head)
  {
    head = NULL;
    tail =NULL;
    delete tmp;
    --node_count;
    return;
  }
  if(tail== NULL && head == NULL)
  {
    return;
  }
  tail = tail -> Plink();
  tail -> set_Next(NULL);
  delete tmp;
  --node_count;
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::remove(iterator& other)
{
Dnode<T> *tmp = other.current;
Dnode<T> *prev, *n;

  if(other.current == NULL)
  {
    return;
  }
  if(other.current == head)
  {
    front_remove();
    return;
  }
  if(tail==other.current)
  {
    rear_remove();
    return;
  }
   prev = other.current -> Plink();
   n = other.current -> Nlink();
   prev -> set_Next(n);
   n -> set_Previous(prev);
   other.current = n;
   delete tmp;
  --node_count;

}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::insert_before(iterator& it, T& item)
{
  Dnode<T> *tmp;

  if(it.current == head)
  {
    front_insert(item);
    return;
  }
  if(head == NULL && tail ==NULL)
  {
    front_insert(item);
    return;

  }
  if(head == tail)
  {
    front_insert(item);
    return;
  }
  if(it.current == NULL && node_count > 0)
  {
    return;
  }
  if(it.current == NULL && node_count == 0)
  {
    front_insert(item);
    return;
  }

  tmp = new Dnode<T>(item);
  it.current -> Plink() -> set_Next(tmp);
  tmp -> set_Previous (it.current -> Plink());
  it.current -> set_Previous(tmp);
  tmp -> set_Next(it.current);
  ++node_count;
  return;
}
////////////////////////////////////////////////////////////////////////////////
template<class T>
void dlist<T>::insert_after(iterator& it, T& item)
{
  Dnode<T> *tmp;

  if(head == NULL && tail ==NULL)
  {
    rear_insert(item);
    return;

  }
  if(head == tail)
  {
    rear_insert(item);
    return;
  }
  if(it.current == NULL && node_count > 0)
  {
    return;
  }
  if(it.current == NULL && node_count == 0)
  {
    rear_insert(item);
    return;
  }
  if(it.current == tail)
  {
    rear_insert(item);
    return;

  }

  tmp = new Dnode<T>(item);
  tmp -> set_Previous(it.current);
  tmp -> set_Next(it.current -> Nlink());
  it.current -> Nlink() -> set_Previous(tmp);
  it.current -> set_Next(tmp);
  ++node_count;
  return;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
