////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Welcome to the template linked list.

David Wisniewski
10/14/2017
Project3
Description:
This class is a double linked list container that is a template class.This means
That you can stick it in your pocket ant use it anywhere. In this class there
is an iterator which allows an application programmer to organize the list
however he or she pleases. In this list you can store anything you want integers
college courses you name it we can store it here!!
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////

#include<iomanip>
#include<string>
#include "Dnode.h"
#include"iterator.h"
#include<cstdlib>
#include<iostream>
using namespace std;
////////////////////////////////////////////////////////////////////////////////
template< class T>
class dlist
{
public:
  typedef node_iterator<T> iterator;
  dlist();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Initilizes head,tail, & node_count to NULL
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
dlist(const dlist & other);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
copies one dlist to another dlist
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
~dlist();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Destructs old linked lists that are not being used and gives the memory back
to the OS
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
dlist& operator= (const dlist<T>& other);
////////////////////////////////////////////////////////////////////////////////
int size(){return node_count;}
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Returns size
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void front_insert(T& object);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Inserts an object to the front of the list
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void rear_insert(T& object);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Inserts an object to the rear of the list
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void show();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Shows the content of the linked list front to back
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void reverse_show();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Shows the content of the linked list back to front
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void front_remove();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Removes an item from the front of the list
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void rear_remove();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Removes an item from the back of the list
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void remove(iterator& other);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Removes the item the iterator is pointing at
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
iterator begin(){return iterator (head);}// Puts the iterator at head
////////////////////////////////////////////////////////////////////////////////
iterator end(){return iterator(NULL);}// Sets the iterator to NULL
////////////////////////////////////////////////////////////////////////////////
iterator r_begin(){return iterator (tail);}// Sets the iterator to tail
////////////////////////////////////////////////////////////////////////////////
iterator r_end(){return iterator(NULL);}// Sets the iterator to NULL
////////////////////////////////////////////////////////////////////////////////
void insert_before(iterator& it, T& item);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Inserts an item before the item the iterator is pointing at
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
void insert_after(iterator& it, T& item);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Inserts an item after the item the iterator is pointing at
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

private:
  Dnode<T>* head;
  Dnode<T>* tail;
  int node_count;
};
#include"dlist.template"
////////////////////////////////////////////////////////////////////////////////
